datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"] // 追加
}

model User {
  id          Int          @id @default(autoincrement())
  name        String
  email       String       @unique
  password    String
  role        String       @default("user")
  status      String       @default("active")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  resetTokens ResetToken[]

  companyName        String?
  address            String?
  phone              String?
  registrationNumber String?

  issuedInvoices   Invoice[] @relation("InvoiceIssuerUser")
  receivedInvoices Invoice[] @relation("InvoiceRecipientUser")
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  clients Client[]
}

model Client {
  id                     Int             @id @default(autoincrement())
  companyName            String
  address                String
  contactName            String
  contactEmail           String
  contactPhone           String
  hasInvoiceRegistration Boolean         @default(false) // この行が存在するか確認
  registrationNumber     String?         @unique
  categoryId             Int?
  category               Category?       @relation(fields: [categoryId], references: [id])
  tags                   TagsOnClients[]
  orders                 Order[]
  status                 String? // Nullable   
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt

  issuedInvoices   Invoice[] @relation("InvoiceIssuerClient")
  receivedInvoices Invoice[] @relation("InvoiceRecipientClient")
}

model Tag {
  id      Int             @id @default(autoincrement())
  name    String          @unique
  clients TagsOnClients[]
}

model TagsOnClients {
  clientId Int
  tagId    Int
  client   Client @relation(fields: [clientId], references: [id], onDelete: Restrict)
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Restrict)

  @@id([clientId, tagId])
}

model ResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Order {
  id          Int         @id @default(autoincrement())
  orderNumber String      @unique
  clientId    Int
  issueDate   DateTime
  dueDate     DateTime
  status      String
  totalAmount Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       OrderItem[]
  client      Client      @relation(fields: [clientId], references: [id])

  invoices Invoice[] @relation("OrderInvoice")
}

model Invoice {
  id            Int           @id @default(autoincrement())
  invoiceNumber String        @unique
  orderId       Int?
  issueDate     DateTime
  dueDate       DateTime
  status        String
  totalAmount   Float
  items         InvoiceItem[]

  // 発行者情報（UserまたはClient）
  issuerUserId   Int?
  issuerClientId Int?
  issuerUser     User?   @relation("InvoiceIssuerUser", fields: [issuerUserId], references: [id])
  issuerClient   Client? @relation("InvoiceIssuerClient", fields: [issuerClientId], references: [id])

  // 受領者情報（UserまたはClient）
  recipientUserId   Int?
  recipientClientId Int?
  recipientUser     User?   @relation("InvoiceRecipientUser", fields: [recipientUserId], references: [id])
  recipientClient   Client? @relation("InvoiceRecipientClient", fields: [recipientClientId], references: [id])

  // Orderとのリレーション（オプション）
  order Order? @relation("OrderInvoice", fields: [orderId], references: [id])
}

model OrderItem {
  id          Int    @id @default(autoincrement())
  orderId     Int
  description String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  order       Order  @relation(fields: [orderId], references: [id])
}

model InvoiceItem {
  id          Int     @id @default(autoincrement())
  invoiceId   Int
  description String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  invoice     Invoice @relation(fields: [invoiceId], references: [id])
}
